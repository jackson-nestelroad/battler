{
  "tangledfeet": { "name": "Tangled Feet", "flags": [] },
  "motordrive": { "name": "Motor Drive", "flags": [] },
  "rivalry": { "name": "Rivalry", "flags": [] },
  "steadfast": { "name": "Steadfast", "flags": [] },
  "snowcloak": { "name": "Snow Cloak", "flags": [] },
  "gluttony": {
    "name": "Gluttony",
    "flags": [],
    "effect": {
      "callbacks": {
        "on_berry_eating_health": ["return $hp * 2"]
      }
    }
  },
  "angerpoint": { "name": "Anger Point", "flags": [] },
  "unburden": { "name": "Unburden", "flags": [] },
  "heatproof": { "name": "Heatproof", "flags": [] },
  "simple": { "name": "Simple", "flags": [] },
  "dryskin": { "name": "Dry Skin", "flags": [] },
  "download": { "name": "Download", "flags": [] },
  "ironfist": { "name": "Iron Fist", "flags": [] },
  "poisonheal": { "name": "Poison Heal", "flags": [] },
  "adaptability": { "name": "Adaptability", "flags": [] },
  "skilllink": { "name": "Skill Link", "flags": [] },
  "hydration": { "name": "Hydration", "flags": [] },
  "solarpower": { "name": "Solar Power", "flags": [] },
  "quickfeet": { "name": "Quick Feet", "flags": [] },
  "normalize": { "name": "Normalize", "flags": [] },
  "sniper": { "name": "Sniper", "flags": [] },
  "magicguard": { "name": "Magic Guard", "flags": [] },
  "noguard": { "name": "No Guard", "flags": [] },
  "stall": { "name": "Stall", "flags": [] },
  "technician": { "name": "Technician", "flags": [] },
  "leafguard": { "name": "Leaf Guard", "flags": [] },
  "klutz": { "name": "Klutz", "flags": [] },
  "moldbreaker": {
    "name": "Mold Breaker",
    "flags": [],
    "effect": {
      "callbacks": {
        "on_start": ["log_ability"],
        "on_before_move": ["add_pseudo_weather: $this.id"],
        "on_after_move": ["remove_pseudo_weather: $this.id"]
      }
    },
    "condition": {
      "duration": 1,
      "callbacks": {
        "suppress_mon_ability": [
          "$ability = func_call(get_ability: $mon.ability)",
          "if func_call(ability_has_flag: $ability breakable):",
          ["return true"]
        ]
      }
    }
  },
  "superluck": { "name": "Super Luck", "flags": [] },
  "aftermath": {
    "name": "Aftermath",
    "flags": [],
    "effect": {
      "callbacks": {
        "on_damaging_hit": {
          "order": 1,
          "program": [
            "if $target.hp == 0 and func_call(move_makes_contact: $move):",
            [
              "damage: $source expr($source.base_max_hp / 4) use_target_as_source"
            ]
          ]
        }
      }
    }
  },
  "anticipation": { "name": "Anticipation", "flags": [] },
  "forewarn": { "name": "Forewarn", "flags": [] },
  "unaware": { "name": "Unaware", "flags": [] },
  "tintedlens": { "name": "Tinted Lens", "flags": [] },
  "filter": { "name": "Filter", "flags": [] },
  "slowstart": { "name": "Slow Start", "flags": [] },
  "scrappy": { "name": "Scrappy", "flags": [] },
  "stormdrain": { "name": "Storm Drain", "flags": [] },
  "icebody": { "name": "Ice Body", "flags": [] },
  "solidrock": { "name": "Solid Rock", "flags": [] },
  "snowwarning": {
    "name": "Snow Warning",
    "flags": [],
    "effect": {
      "callbacks": {
        "on_start": ["set_weather: snowweather use_target_as_source"]
      }
    }
  },
  "hailwarning": {
    "name": "Snow Warning",
    "flags": [],
    "effect": {
      "callbacks": {
        "on_start": ["set_weather: hailweather use_target_as_source"]
      }
    }
  },
  "honeygather": { "name": "Honey Gather", "flags": [] },
  "frisk": { "name": "Frisk", "flags": [] },
  "reckless": { "name": "Reckless", "flags": [] },
  "multitype": {
    "name": "Multitype",
    "flags": ["Permanent"],
    "effect": {
      "callbacks": {
        "on_types": {
          "order": 1,
          "program": [
            "# Each Arceus forme has its own species data, so the type of each forme is actually set directly by the forme.",
            "# Multitype technically alters the Mon's type directly, so we implement dynamic type changing logic here as well.",
            "if $mon.transformed or !$mon.item:",
            ["return $types"],
            "$type = normal",
            "$data = func_call(special_item_data: $mon.item)",
            "if $data.is_defined and $data.judgment.is_defined:",
            ["$type = $data.judgment.type.to_string"],
            "return [$type]"
          ]
        },
        "on_update": [
          "# Ensure Arceus is the correct forme.",
          "# Note that when team validation is used, Arceus is forced into the correct forme.",
          "if func_call(base_species: $mon) != arceus or $mon.transformed or !$mon.item:",
          ["return"],
          "$type = normal",
          "$data = func_call(special_item_data: $mon.item)",
          "if $data.is_defined and $data.judgment.is_defined:",
          ["$type = $data.judgment.type.to_string"],
          "$species = func_call(get_species: str('arceus-{}', $type))",
          "if !$species:",
          ["return"],
          "if $mon.species != $species.id:",
          ["forme_change: $mon $species.id permanent"]
        ],
        "on_take_item": [
          "# Item cannot be taken if Multitype is using it.",
          "if $target.transformed:",
          ["return"],
          "$data = func_call(special_item_data: $item.id)",
          "return !$data or !$data.judgment"
        ],
        "on_set_item": [
          "# Item cannot be given if Multitype would use it.",
          "if $target.transformed:",
          ["return"],
          "$data = func_call(special_item_data: $item.id)",
          "return !$data or !$data.judgment"
        ]
      }
    }
  },
  "flowergift": { "name": "Flower Gift", "flags": ["NoRolePlay", "NoTrace"] },
  "baddreams": { "name": "Bad Dreams", "flags": [] }
}
