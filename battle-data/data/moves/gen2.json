{
  "sketch": {
    "name": "Sketch",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 1,
    "accuracy": "exempt",
    "target": "Normal",
    "flags": [
      "BypassSubstitute",
      "FailCopycat",
      "FailEncore",
      "FailInstruct",
      "FailMimic",
      "NoAssist",
      "NoMetronome",
      "NoSketch",
      "NoSleepTalk"
    ],
    "no_pp_boosts": true,
    "effect": {
      "callbacks": {
        "on_hit": [
          "$last_move = $target.last_move",
          "if !$last_move or $source.transformed or func_call(has_move: $source $last_move.id):",
          ["return false"],
          "if func_call(move_has_flag: $last_move nosketch):",
          ["return false"],
          "$sketch_index = func_call(move_slot_index: $source $this.id)",
          "overwrite_move_slot: $source $sketch_index func_call(move_slot: $last_move) override_base_slot",
          "log_activate: with_target use_source str('newmove:{}', $last_move.name)"
        ]
      }
    }
  },
  "triplekick": {
    "name": "Triple Kick",
    "category": "Physical",
    "primary_type": "Fighting",
    "pp": 10,
    "accuracy": 90,
    "base_power": 10,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "multiaccuracy": true,
    "multihit": 3,
    "effect": {
      "callbacks": { "on_move_base_power": ["return 10 * $move.hit"] }
    }
  },
  "thief": {
    "name": "Thief",
    "category": "Physical",
    "primary_type": "Dark",
    "pp": 25,
    "accuracy": 100,
    "base_power": 60,
    "target": "Normal",
    "flags": [
      "Contact",
      "FailCopycat",
      "FailMeFirst",
      "Mirror",
      "NoAssist",
      "NoMetronome",
      "Protect"
    ],
    "effect": {
      "callbacks": {
        "on_after_hit": [
          "if $source.item.is_defined:",
          ["return"],
          "$item = func_call(take_item: $target silent)",
          "if !$item:",
          ["return"],
          "if !func_call(set_item: $source $item use_target_as_source):",
          ["return"]
        ]
      }
    }
  },
  "spiderweb": {
    "name": "Spider Web",
    "category": "Status",
    "primary_type": "Bug",
    "pp": 10,
    "accuracy": "exempt",
    "target": "Normal",
    "flags": ["Mirror", "Protect", "Reflectable"],
    "hit_effect": {
      "volatile_status": "trapped"
    }
  },
  "mindreader": {
    "name": "Mind Reader",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 5,
    "accuracy": "exempt",
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_hit": [
          "# Add the volatile status to the user.",
          "add_volatile: $source lockon use_target_as_source"
        ]
      }
    }
  },
  "nightmare": {
    "name": "Nightmare",
    "category": "Status",
    "primary_type": "Ghost",
    "pp": 15,
    "accuracy": 100,
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "hit_effect": {
      "volatile_status": "nightmare"
    },
    "condition": {
      "no_copy": true,
      "callbacks": {
        "on_start": ["if !$target.is_asleep:", ["return false"], "log_start"],
        "on_residual": ["damage: $target expr($target.base_max_hp / 4)"],
        "on_after_cure_status": ["remove_volatile: $target $this.id"]
      }
    }
  },
  "flamewheel": {
    "name": "Flame Wheel",
    "category": "Physical",
    "primary_type": "Fire",
    "pp": 25,
    "accuracy": 100,
    "base_power": 60,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect", "Thawing"],
    "secondary_effects": [{ "chance": "10%", "target": { "status": "brn" } }]
  },
  "snore": {
    "name": "Snore",
    "category": "Special",
    "primary_type": "Normal",
    "pp": 15,
    "accuracy": 100,
    "base_power": 50,
    "target": "Normal",
    "flags": [
      "BypassSubstitute",
      "Mirror",
      "NoMetronome",
      "Protect",
      "SleepUsable",
      "Sound"
    ],
    "secondary_effects": [
      { "chance": "30%", "target": { "volatile_status": "flinch" } }
    ],
    "effect": {
      "callbacks": {
        "on_try_use_move": ["return $user.is_asleep"]
      }
    }
  },
  "curse": {
    "name": "Curse",
    "category": "Status",
    "primary_type": "Ghost",
    "pp": 10,
    "accuracy": "exempt",
    "target": "Normal",
    "flags": ["BypassSubstitute"],
    "hit_effect": {
      "volatile_status": "curse"
    },
    "effect": {
      "callbacks": {
        "on_move_target_override": [
          "if !func_call(has_type: $mon ghost):",
          ["return user"]
        ],
        "on_use_move": [
          "if func_call(has_type: $user ghost):",
          ["$move.target = user"],
          "else if func_call(is_ally: $user $selected_target):",
          ["$move.target = randomnormal"]
        ],
        "on_try_hit": [
          "if func_call(has_type: $source ghost):",
          ["$effect_state.apply_self_damage = true", "return"],
          "$effect_state.apply_self_damage = false",
          "if func_call(has_volatile: $target $this.id):",
          ["return false"],
          "$move.hit_effect.volatile_status = undefined",
          "$move.user_effect = func_call(hit_effect)",
          "$move.user_effect.boosts = func_call(boost_table: 'spe:-1' 'atk:1' 'def:1')"
        ],
        "on_hit": [
          "if $effect_state.apply_self_damage:",
          ["direct_damage: $source expr($source.max_hp / 2)"]
        ]
      }
    },
    "condition": {
      "callbacks": {
        "on_start": ["log_start"],
        "on_residual": ["damage: $target expr($target.base_max_hp / 4)"]
      }
    }
  },
  "flail": {
    "name": "Flail",
    "category": "Physical",
    "primary_type": "Normal",
    "pp": 15,
    "accuracy": 100,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_move_base_power": [
          "$ratio = expr(($target.hp * 10000) / $target.max_hp)",
          "$ratio = func_call(max: $ratio 1)",
          "if $ratio < 417:",
          ["return 200"],
          "if $ratio < 1042:",
          ["return 150"],
          "if $ratio < 2083:",
          ["return 100"],
          "if $ratio < 3542:",
          ["return 80"],
          "if $ratio < 6875:",
          ["return 40"],
          "return 20"
        ]
      }
    }
  },
  "conversion2": {
    "name": "Conversion 2",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 30,
    "accuracy": "exempt",
    "target": "Normal",
    "flags": ["BypassSubstitute"],
    "effect": {
      "callbacks": {
        "on_hit": [
          "if !$target.last_move_used:",
          ["return false"],
          "$types = []",
          "$last_type = $target.last_move_used.type",
          "foreach $type in func_call(all_types):",
          [
            "if func_call(has_type: $source $type):",
            ["continue"],
            "if func_call(type_is_weak_against: $last_type $type) or func_call(type_has_no_effect_against: $last_type $type):",
            ["$types = func_call(append: $types $type)"]
          ],
          "if $types.is_empty:",
          ["return false"],
          "$type = func_call(sample: $types)",
          "return func_call(set_types: $source $type)"
        ]
      }
    }
  },
  "aeroblast": {
    "name": "Aeroblast",
    "category": "Special",
    "primary_type": "Flying",
    "pp": 5,
    "accuracy": 95,
    "base_power": 100,
    "target": "Any",
    "flags": ["Distance", "Mirror", "Protect", "Wind"],
    "crit_ratio": 2
  },
  "cottonspore": {
    "name": "Cotton Spore",
    "category": "Status",
    "primary_type": "Grass",
    "pp": 40,
    "accuracy": 100,
    "target": "AllAdjacentFoes",
    "flags": ["Mirror", "Powder", "Protect", "Reflectable"],
    "hit_effect": { "boosts": { "spe": -2 } }
  },
  "reversal": {
    "name": "Reversal",
    "category": "Physical",
    "primary_type": "Fighting",
    "pp": 15,
    "accuracy": 100,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_move_base_power": [
          "$ratio = expr(($target.hp * 10000) / $target.max_hp)",
          "$ratio = func_call(max: $ratio 1)",
          "if $ratio < 417:",
          ["return 200"],
          "if $ratio < 1042:",
          ["return 150"],
          "if $ratio < 2083:",
          ["return 100"],
          "if $ratio < 3542:",
          ["return 80"],
          "if $ratio < 6875:",
          ["return 40"],
          "return 20"
        ]
      }
    }
  },
  "spite": {
    "name": "Spite",
    "category": "Status",
    "primary_type": "Ghost",
    "pp": 10,
    "accuracy": 100,
    "target": "Normal",
    "flags": ["BypassSubstitute", "Mirror", "Protect", "Reflectable"],
    "effect": {
      "callbacks": {
        "on_hit": [
          "$last_move = $target.last_move",
          "if !$last_move:",
          ["return false"],
          "$pp = func_call(deduct_pp: $target $last_move.id 4)",
          "if $pp == 0:",
          ["return false"]
        ]
      }
    }
  },
  "powdersnow": {
    "name": "Powder Snow",
    "category": "Special",
    "primary_type": "Ice",
    "pp": 25,
    "accuracy": 100,
    "base_power": 40,
    "target": "AllAdjacentFoes",
    "flags": ["Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "10%",
        "target": {
          "status": "frz"
        }
      }
    ]
  },
  "protect": {
    "name": "Protect",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 10,
    "accuracy": "exempt",
    "priority": 4,
    "target": "User",
    "flags": ["FailCopycat", "NoAssist", "NoMetronome", "Stalling"],
    "hit_effect": {
      "volatile_status": "protect"
    },
    "effect": {
      "callbacks": {
        "on_prepare_hit": [
          "return func_call(any_mon_will_move_this_turn) and func_call(run_event_for_mon: StallMove)"
        ],
        "on_hit": ["add_volatile: $target stall"]
      }
    },
    "condition": {
      "duration": 1,
      "callbacks": {
        "on_start": ["log_single_turn: with_target"],
        "on_try_hit": {
          "priority": 3,
          "program": [
            "if !func_call(move_has_flag: $move protect):",
            ["return"],
            "log_activate",
            "return stop"
          ]
        }
      }
    }
  },
  "machpunch": {
    "name": "Mach Punch",
    "category": "Physical",
    "primary_type": "Fighting",
    "pp": 30,
    "accuracy": 100,
    "base_power": 40,
    "priority": 1,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect", "Punch"]
  },
  "scaryface": {
    "name": "Scary Face",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 10,
    "accuracy": 100,
    "target": "Normal",
    "flags": ["Mirror", "Protect", "Reflectable"],
    "hit_effect": {
      "boosts": {
        "spe": -2
      }
    }
  },
  "feintattack": {
    "name": "Feint Attack",
    "category": "Physical",
    "primary_type": "Dark",
    "pp": 20,
    "accuracy": "exempt",
    "base_power": 60,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"]
  },
  "sweetkiss": {
    "name": "Sweet Kiss",
    "category": "Status",
    "primary_type": "Fairy",
    "pp": 10,
    "accuracy": 75,
    "target": "Normal",
    "flags": ["Mirror", "Protect", "Reflectable"],
    "hit_effect": {
      "volatile_status": "confusion"
    }
  },
  "bellydrum": {
    "name": "Belly Drum",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 10,
    "accuracy": "exempt",
    "target": "User",
    "flags": ["Snatch"],
    "effect": {
      "callbacks": {
        "on_hit": [
          "if $target.hp <= expr($target.max_hp / 2) or $target.boosts.atk >= 6 or $target.max_hp == 1:",
          ["return false"],
          "direct_damage: $target expr($target.max_hp / 2)",
          "boost: $target 'atk:12'"
        ]
      }
    }
  },
  "sludgebomb": {
    "name": "Sludge Bomb",
    "category": "Special",
    "primary_type": "Poison",
    "pp": 10,
    "accuracy": 100,
    "base_power": 90,
    "target": "Normal",
    "flags": ["Bullet", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "30%",
        "target": {
          "status": "psn"
        }
      }
    ]
  },
  "mudslap": {
    "name": "Mud-Slap",
    "category": "Special",
    "primary_type": "Ground",
    "pp": 10,
    "accuracy": 100,
    "base_power": 20,
    "target": "Normal",
    "flags": ["AccuracyLowering", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "target": {
          "boosts": {
            "acc": -1
          }
        }
      }
    ]
  },
  "octazooka": {
    "name": "Octazooka",
    "category": "Special",
    "primary_type": "Water",
    "pp": 10,
    "accuracy": 85,
    "base_power": 65,
    "target": "Normal",
    "flags": ["AccuracyLowering", "Bullet", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "50%",
        "target": {
          "boosts": {
            "acc": -1
          }
        }
      }
    ]
  },
  "spikes": {
    "name": "Spikes",
    "category": "Status",
    "primary_type": "Ground",
    "pp": 20,
    "accuracy": "exempt",
    "target": "FoeSide",
    "flags": ["MustPressure", "Reflectable"],
    "hit_effect": {
      "side_condition": "spikes"
    },
    "condition": {
      "callbacks": {
        "on_side_start": [
          "$effect_state.layers = 1",
          "log_side_start: str('count:{}', $effect_state.layers)"
        ],
        "on_side_restart": [
          "if $effect_state.layers >= 3:",
          ["return false"],
          "$effect_state.layers = $effect_state.layers + 1",
          "log_side_start: str('count:{}', $effect_state.layers)",
          "return true"
        ],
        "on_switch_in": [
          "if !$mon.is_grounded or $mon.is_immune_to_entry_hazards:",
          ["return"],
          "if $effect_state.layers == 1:",
          ["$den = 8"],
          "else if $effect_state.layers == 2:",
          ["$den = 6"],
          "else:",
          ["$den = 4"],
          "damage: $mon expr($mon.max_hp / $den)"
        ],
        "on_side_end": [
          "if $source_effect == $this.id:",
          ["log_side_end: with_source"],
          "else:",
          ["log_side_end: with_source_effect with_source"]
        ]
      }
    }
  },
  "zapcannon": {
    "name": "Zap Cannon",
    "category": "Special",
    "primary_type": "Electric",
    "pp": 5,
    "accuracy": 50,
    "base_power": 120,
    "target": "Normal",
    "flags": ["Bullet", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "target": {
          "status": "par"
        }
      }
    ]
  },
  "foresight": {
    "name": "Foresight",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 40,
    "accuracy": "exempt",
    "target": "Normal",
    "flags": ["BypassSubstitute", "Mirror", "Protect", "Reflectable"],
    "hit_effect": {
      "volatile_status": "foresight"
    },
    "condition": {
      "no_copy": true,
      "callbacks": {
        "on_start": ["log_start"],
        "on_negate_immunity": [
          "if func_call(has_type: $mon ghost) and ($type == normal or $type == fighting):",
          ["return false"]
        ],
        "on_modify_boosts": ["if $boosts.eva > 0:", ["$boosts.eva = 0"]]
      }
    }
  },
  "destinybond": {
    "name": "Destiny Bond",
    "category": "Status",
    "primary_type": "Ghost",
    "pp": 5,
    "accuracy": "exempt",
    "target": "User",
    "flags": ["BypassSubstitute", "FailCopycat", "NoAssist", "NoMetronome"],
    "hit_effect": {
      "volatile_status": "destinybond"
    },
    "condition": {
      "callbacks": {
        "on_start": ["log_single_move: with_target"],
        "on_faint": [
          "if !$source or !$effect or func_call(is_ally: $target $source):",
          ["return"],
          "if $effect.is_move and !func_call(move_has_flag: $effect future):",
          ["log_activate: with_target", "faint: $source"]
        ],
        "on_before_move": {
          "priority": 999,
          "program": ["remove_volatile: $user $this.id"]
        }
      }
    }
  },
  "perishsong": {
    "name": "Perish Song",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 5,
    "accuracy": "exempt",
    "target": "All",
    "flags": ["BypassSubstitute", "Distance", "Sound"],
    "effect": {
      "callbacks": {
        "on_hit_field": [
          "$success = false",
          "$activate = false",
          "$targets = func_call(all_active_mons)",
          "if $targets.is_empty:",
          ["return false"],
          "foreach $target in func_call(prepare_direct_move: $targets):",
          [
            "$success = true",
            "# Activate if at least one Mon did not already have this status.",
            "$hit_target = func_call(add_volatile: $target $this.id)",
            "$activate = $activate or $hit_target"
          ],
          "if !$success or !$activate:",
          ["return false"],
          "if $activate:",
          ["log_field_activate"]
        ]
      }
    },
    "condition": {
      "duration": 4,
      "callbacks": {
        "on_residual": ["log_start: str('perish:{}', $effect_state.duration)"],
        "on_end": ["log_start: 'perish:0'", "faint: $target"]
      }
    }
  },
  "icywind": {
    "name": "Icy Wind",
    "category": "Special",
    "primary_type": "Ice",
    "pp": 15,
    "accuracy": 95,
    "base_power": 55,
    "target": "AllAdjacentFoes",
    "flags": ["Mirror", "Protect", "Wind"],
    "secondary_effects": [
      {
        "target": {
          "boosts": {
            "spe": -1
          }
        }
      }
    ]
  },
  "detect": {
    "name": "Detect",
    "category": "Status",
    "primary_type": "Fighting",
    "pp": 5,
    "accuracy": "exempt",
    "priority": 4,
    "target": "User",
    "flags": ["FailCopycat", "NoAssist", "NoMetronome", "Stalling"],
    "hit_effect": {
      "volatile_status": "protect"
    },
    "effect": {
      "delegates": ["move:protect"]
    }
  },
  "bonerush": {
    "name": "Bone Rush",
    "category": "Physical",
    "primary_type": "Ground",
    "pp": 10,
    "accuracy": 90,
    "base_power": 25,
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "multihit": [2, 5]
  },
  "lockon": {
    "name": "Lock-On",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 5,
    "accuracy": "exempt",
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_hit": [
          "# Add the volatile status to the user.",
          "add_volatile: $source $this.id use_target_as_source"
        ]
      }
    },
    "condition": {
      "duration": 2,
      "no_copy": true,
      "callbacks": {
        "on_start": ["log_activate: with_target with_source"],
        "on_source_invulnerability": {
          "priority": 1,
          "program": ["return true"]
        },
        "on_source_accuracy_exempt": ["return false"]
      }
    }
  },
  "outrage": {
    "name": "Outrage",
    "category": "Physical",
    "primary_type": "Dragon",
    "pp": 10,
    "accuracy": 100,
    "base_power": 120,
    "target": "RandomNormal",
    "flags": ["Contact", "FailInstruct", "Mirror", "Protect"],
    "user_effect": {
      "volatile_status": "lockedmove"
    }
  },
  "sandstorm": {
    "name": "Sandstorm",
    "category": "Status",
    "primary_type": "Rock",
    "pp": 10,
    "accuracy": "exempt",
    "target": "All",
    "flags": ["Wind"],
    "hit_effect": {
      "weather": "sandstormweather"
    }
  },
  "gigadrain": {
    "name": "Giga Drain",
    "category": "Special",
    "primary_type": "Grass",
    "pp": 10,
    "accuracy": 100,
    "base_power": 75,
    "target": "Normal",
    "flags": ["Heal", "Mirror", "Protect"],
    "drain_percent": "1/2"
  },
  "endure": {
    "name": "Endure",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 10,
    "accuracy": "exempt",
    "priority": 4,
    "target": "User",
    "flags": ["FailCopycat", "NoAssist", "NoMetronome", "Stalling"],
    "hit_effect": {
      "volatile_status": "endure"
    },
    "effect": {
      "callbacks": {
        "on_prepare_hit": [
          "return func_call(any_mon_will_move_this_turn) and func_call(run_event_for_mon: StallMove)"
        ],
        "on_hit": ["add_volatile: $target stall"]
      }
    },
    "condition": {
      "duration": 1,
      "callbacks": {
        "on_start": ["log_single_turn: with_target"],
        "on_damage": {
          "priority": -10,
          "program": [
            "if $effect.is_move and $damage > $target.hp:",
            ["log_activate: with_target", "return $target.hp - 1"]
          ]
        }
      }
    }
  },
  "charm": {
    "name": "Charm",
    "category": "Status",
    "primary_type": "Fairy",
    "pp": 20,
    "accuracy": 100,
    "target": "Normal",
    "flags": ["Mirror", "Protect", "Reflectable"],
    "hit_effect": {
      "boosts": {
        "atk": -2
      }
    }
  },
  "rollout": {
    "name": "Rollout",
    "category": "Physical",
    "primary_type": "Rock",
    "pp": 20,
    "accuracy": 90,
    "base_power": 30,
    "target": "Normal",
    "flags": ["Contact", "FailInstruct", "Mirror", "NoParentalBond", "Protect"],
    "effect": {
      "callbacks": {
        "on_move_base_power": [
          "$base_power = $move.base_power",
          "$rollout_state = func_call(volatile_status_state: $source $this.id)",
          "if $rollout_state.is_defined:",
          [
            "$base_power = $base_power * 2 ^ $rollout_state.hit_count",
            "# Update the hit count for the next use of the move.",
            "$rollout_state.hit_count = $rollout_state.hit_count + 1",
            "# If we are not on the last hit, update the duration to keep us locked into this move.",
            "# The reason for manually updating the duration is that if the next use of the move is interrupted, the move will end by default.",
            "if $rollout_state.hit_count < 5:",
            ["$rollout_state.duration = 2"]
          ],
          "if func_call(has_volatile: $source defensecurl):",
          ["$base_power = $base_power * 2"],
          "return $base_power"
        ],
        "on_use_move": ["add_volatile: $user $this.id"]
      }
    },
    "condition": {
      "duration": 1,
      "callbacks": {
        "on_start": ["$effect_state.hit_count = 0"],
        "on_residual": [
          "if $target.last_move.is_defined and $target.last_move.id == struggle:",
          ["remove_volatile: $target $this.id"]
        ],
        "on_lock_move": ["return $this.id"]
      }
    }
  },
  "falseswipe": {
    "name": "False Swipe",
    "category": "Physical",
    "primary_type": "Normal",
    "pp": 40,
    "accuracy": 100,
    "base_power": 40,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_damage": {
          "priority": -999,
          "program": ["if $damage >= $target.hp:", ["return $target.hp - 1"]]
        }
      }
    }
  },
  "swagger": {
    "name": "Swagger",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 15,
    "accuracy": 85,
    "target": "Normal",
    "flags": ["Mirror", "Protect", "Reflectable"],
    "hit_effect": {
      "status": "confusion",
      "boosts": {
        "atk": 2
      }
    }
  },
  "milkdrink": {
    "name": "Milk Drink",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 5,
    "accuracy": "exempt",
    "target": "User",
    "flags": ["Heal", "Snatch"],
    "hit_effect": {
      "heal_percent": "50%"
    }
  },
  "spark": {
    "name": "Spark",
    "category": "Physical",
    "primary_type": "Electric",
    "pp": 20,
    "accuracy": 100,
    "base_power": 65,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "30%",
        "target": {
          "status": "par"
        }
      }
    ]
  },
  "furycutter": {
    "name": "Fury Cutter",
    "category": "Physical",
    "primary_type": "Bug",
    "pp": 20,
    "accuracy": 95,
    "base_power": 40,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect", "Slicing"],
    "effect": {
      "callbacks": {
        "on_move_base_power": [
          "add_volatile: $source $this.id",
          "$volatile_state = func_call(volatile_status_state: $source $this.id)",
          "return func_call(clamp_number: expr($move.base_power * $volatile_state.multiplier) 1 160)"
        ]
      }
    },
    "condition": {
      "duration": 2,
      "callbacks": {
        "on_start": ["$effect_state.multiplier = 1"],
        "on_restart": [
          "if $effect_state.multiplier < 4:",
          ["$effect_state.multiplier = $effect_state.multiplier * 2"],
          "$effect_state.duration = 2",
          "return true"
        ]
      }
    }
  },
  "steelwing": {
    "name": "Steel Wing",
    "category": "Physical",
    "primary_type": "Steel",
    "pp": 25,
    "accuracy": 90,
    "base_power": 70,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "10%",
        "user": {
          "boosts": {
            "def": -1
          }
        }
      }
    ]
  },
  "meanlook": {
    "name": "Mean Look",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 5,
    "accuracy": "exempt",
    "target": "Normal",
    "flags": ["Mirror", "Reflectable"],
    "hit_effect": {
      "volatile_status": "trapped"
    }
  },
  "attract": {
    "name": "Attract",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 15,
    "accuracy": 100,
    "target": "Normal",
    "flags": ["BypassSubstitute", "Mirror", "Protect", "Reflectable"],
    "hit_effect": {
      "volatile_status": "attract"
    },
    "condition": {
      "no_copy": true,
      "callbacks": {
        "on_start": [
          "if !($target.gender == m and $source.gender == f) and !($target.gender == f and $source.gender == m):",
          ["return false"],
          "if !$source_effect.is_move:",
          ["log_start: with_source_effect"],
          "else:",
          ["log_start"]
        ],
        "on_any_exit": [
          "if $mon == $effect_state.source:",
          ["remove_volatile: $effect_state.target $this.id"]
        ],
        "on_end": ["log_end"],
        "on_before_move": {
          "priority": 2,
          "program": [
            "log_activate: with_target with_source use_effect_state_source_as_source",
            "if func_call(chance: 1 2):",
            ["log_cant", "return false"]
          ]
        }
      }
    }
  },
  "sleeptalk": {
    "name": "Sleep Talk",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 10,
    "accuracy": "exempt",
    "target": "User",
    "flags": [
      "CallsMove",
      "FailCopycat",
      "FailEncore",
      "FailInstruct",
      "FailMimic",
      "NoAssist",
      "NoMetronome",
      "NoSleepTalk",
      "SleepUsable"
    ],
    "effect": {
      "callbacks": {
        "on_try_use_move": ["return $user.is_asleep"],
        "on_hit": [
          "$moves = []",
          "foreach $move_slot in $target.move_slots:",
          [
            "$potential_move = func_call(get_move: $move_slot.id)",
            "if $move_slot.is_defined and !func_call(move_has_flag: $potential_move nosleeptalk):",
            ["$moves = func_call(append: $moves $potential_move.id)"]
          ],
          "$random_move = func_call(sample: $moves)",
          "if !$random_move:",
          ["return false"],
          "use_move: $source $random_move"
        ]
      }
    }
  },
  "healbell": {
    "name": "Heal Bell",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 5,
    "accuracy": "exempt",
    "target": "AllyTeam",
    "flags": ["BypassSubstitute", "Distance", "Snatch", "Sound"],
    "effect": {
      "callbacks": {
        "on_hit_side": [
          "log_activate: with_source",
          "$success = false",
          "foreach $ally in func_call(all_mons_on_side: $source.side):",
          [
            "if $ally == $source or !$ally.is_soundproof:",
            [
              "$cured = func_call(cure_status: $ally)",
              "$success = $success or $cured"
            ]
          ],
          "return $success"
        ]
      }
    }
  },
  "return": {
    "name": "Return",
    "category": "Physical",
    "primary_type": "Normal",
    "pp": 20,
    "accuracy": 100,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_move_base_power": [
          "return func_call(max: 1 expr($source.friendship * 10 / 25))"
        ]
      }
    }
  },
  "present": {
    "name": "Present",
    "category": "Physical",
    "primary_type": "Normal",
    "pp": 15,
    "accuracy": 90,
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_use_move": [
          "$rand = func_call(random: 10)",
          "if $rand < 2:",
          [
            "$move.hit_effect = func_call(hit_effect)",
            "$move.hit_effect.heal_percent = 1/4",
            "$move.effect_state.infiltrates = true"
          ],
          "else if $rand < 6:",
          ["$move.base_power = 40"],
          "else if $rand < 9:",
          ["$move.base_power = 80"],
          "else:",
          ["$move.base_power = 120"]
        ]
      }
    }
  },
  "frustration": {
    "name": "Frustration",
    "category": "Physical",
    "primary_type": "Normal",
    "pp": 20,
    "accuracy": 100,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_move_base_power": [
          "return func_call(max: 1 expr((255 - $source.friendship) * 10 / 25))"
        ]
      }
    }
  },
  "safeguard": {
    "name": "Safeguard",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 25,
    "accuracy": "exempt",
    "target": "AllySide",
    "flags": ["Snatch"],
    "hit_effect": {
      "side_condition": "safeguard"
    },
    "condition": {
      "duration": 5,
      "callbacks": {
        "on_side_start": ["log_side_start"],
        "on_side_end": ["log_side_end"],
        "on_set_status": [
          "if $effect.id == yawn:",
          ["return"],
          "if $effect.is_move and $effect.effect_state.infiltrates:",
          ["return"],
          "if $target == $source:",
          ["return"],
          "log_activate: with_target",
          "return false"
        ],
        "on_add_volatile": [
          "if $effect.is_move and $effect.effect_state.infiltrates:",
          ["return"],
          "if $target == $source:",
          ["return"],
          "if $volatile.id != confusion and $volatile.id != yawn:",
          ["return"],
          "log_activate: with_target",
          "return false"
        ]
      }
    }
  },
  "painsplit": {
    "name": "Pain Split",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 20,
    "accuracy": "exempt",
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_hit": [
          "$target_hp = $target.undynamaxed_hp",
          "$average_hp = func_call(max: 1 expr(($target.hp + $source.hp) / 2))",
          "$target_diff = $target_hp - $average_hp",
          "set_hp: $target $average_hp",
          "set_hp: $source $average_hp"
        ]
      }
    }
  },
  "sacredfire": {
    "name": "Sacred Fire",
    "category": "Physical",
    "primary_type": "Fire",
    "pp": 5,
    "accuracy": 95,
    "base_power": 100,
    "target": "Normal",
    "flags": ["Mirror", "Protect", "Thawing"],
    "secondary_effects": [
      {
        "chance": "50%",
        "target": {
          "status": "brn"
        }
      }
    ]
  },
  "magnitude": {
    "name": "Magnitude",
    "category": "Physical",
    "primary_type": "Ground",
    "pp": 30,
    "accuracy": 100,
    "target": "AllAdjacent",
    "flags": ["Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_use_move": [
          "$i = func_call(random: 100)",
          "if $i < 5:",
          ["$effect_state.magnitude = 4", "$move.base_power = 10"],
          "else if $i < 15:",
          ["$effect_state.magnitude = 5", "$move.base_power = 30"],
          "else if $i < 35:",
          ["$effect_state.magnitude = 6", "$move.base_power = 50"],
          "else if $i < 65:",
          ["$effect_state.magnitude = 7", "$move.base_power = 70"],
          "else if $i < 85:",
          ["$effect_state.magnitude = 8", "$move.base_power = 90"],
          "else if $i < 95:",
          ["$effect_state.magnitude = 9", "$move.base_power = 110"],
          "else:",
          ["$effect_state.magnitude = 10", "$move.base_power = 150"]
        ],
        "on_use_move_message": [
          "log_activate: str('magnitude:{}', $effect_state.magnitude)"
        ]
      }
    }
  },
  "dynamicpunch": {
    "name": "Dynamic Punch",
    "category": "Physical",
    "primary_type": "Fighting",
    "pp": 5,
    "accuracy": 50,
    "base_power": 100,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect", "Punch"],
    "secondary_effects": [
      {
        "target": {
          "volatile_status": "confusion"
        }
      }
    ]
  },
  "megahorn": {
    "name": "Megahorn",
    "category": "Physical",
    "primary_type": "Bug",
    "pp": 10,
    "accuracy": 85,
    "base_power": 120,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"]
  },
  "dragonbreath": {
    "name": "Dragon Breath",
    "category": "Special",
    "primary_type": "Dragon",
    "pp": 20,
    "accuracy": 100,
    "base_power": 60,
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "30%",
        "target": {
          "status": "par"
        }
      }
    ]
  },
  "batonpass": {
    "name": "Baton Pass",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 40,
    "accuracy": "exempt",
    "target": "User",
    "flags": [],
    "user_switch": "copyvolatile",
    "effect": {
      "callbacks": {
        "on_hit": [
          "if !func_call(can_switch: $target.player):",
          ["return false"],
          "# Avoids Pursuit.",
          "$target.skip_before_switch_out = true"
        ]
      }
    }
  },
  "encore": {
    "name": "Encore",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 5,
    "accuracy": 100,
    "target": "Normal",
    "flags": [
      "BypassSubstitute",
      "FailEncore",
      "Mirror",
      "Protect",
      "Reflectable"
    ],
    "hit_effect": {
      "volatile_status": "encore"
    },
    "condition": {
      "duration": 3,
      "no_copy": true,
      "callbacks": {
        "on_start": [
          "$last_move = $target.last_move",
          "if !$last_move or func_call(move_has_flag: $last_move failencore):",
          ["return false"],
          "$index = func_call(move_slot_index: $target $last_move.id)",
          "if $index.is_undefined:",
          ["return false"],
          "$move_slot = func_call(move_slot_at_index: $target $index)",
          "if !$move_slot or $move_slot.pp == 0:",
          ["return false"],
          "$effect_state.move = $last_move.id",
          "log_start",
          "if func_call(will_move_this_turn: $target):",
          ["$effect_state.duration = $effect_state.duration + 1"]
        ],
        "on_override_move": [
          "if $move.id != $effect_state.move:",
          ["return $effect_state.move"]
        ],
        "on_residual": [
          "$index = func_call(move_slot_index: $target $effect_state.move)",
          "if $index.is_defined:",
          ["$move_slot = func_call(move_slot_at_index: $target $index)"],
          "if $move_slot.is_defined and $move_slot.pp == 0:",
          ["remove_volatile: $target $this.id"]
        ],
        "on_end": ["log_end"],
        "on_disable_move": [
          "if !func_call(has_move: $mon $effect_state.move):",
          ["return"],
          "foreach $move_slot in $mon.move_slots:",
          [
            "if $move_slot.id != $effect_state.move:",
            ["disable_move: $mon $move_slot.id"]
          ]
        ]
      }
    }
  },
  "pursuit": {
    "name": "Pursuit",
    "category": "Physical",
    "primary_type": "Dark",
    "pp": 20,
    "accuracy": 100,
    "base_power": 40,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_move_base_power": [
          "if $target.being_called_back or $target.needs_switch:",
          ["return $move.base_power * 2"]
        ],
        "on_before_turn": [
          "$side = $mon.foe_side",
          "add_side_condition: $side $this.id use_target_as_source",
          "$pursuit_state = func_call(side_condition_effect_state: $side $this.id)",
          "if !$pursuit_state.sources:",
          ["$pursuit_state.sources = []"],
          "$pursuit_state.sources = func_call(append: $pursuit_state.sources $mon)"
        ],
        "on_use_move": [
          "if $target.being_called_back or $target.needs_switch:",
          ["$move.accuracy = exempt"]
        ],
        "on_try_hit": [
          "$pursuit_state = func_call(side_condition_effect_state: $target.side $this.id)",
          "if !$pursuit_state or !$pursuit_state.sources:",
          ["return"],
          "$pursuit_state.sources = func_call(remove: $pursuit_state.sources $source)"
        ]
      }
    },
    "condition": {
      "duration": 1,
      "callbacks": {
        "on_before_switch_out": [
          "$activated = false",
          "# Make a copy, since this list is mutated after Pursuit hits.",
          "$sources = $effect_state.sources",
          "foreach $source in $sources:",
          [
            "if !func_call(is_adjacent: $source $mon) or !func_call(cancel_move: $source) or $source.hp == 0:",
            ["continue"],
            "if !$activated:",
            ["$activated = true", "log_activate: with_target"],
            "do_move: $source $this.id func_call(target_location_of_mon: $source $mon) $mon"
          ]
        ]
      }
    }
  },
  "rapidspin": {
    "name": "Rapid Spin",
    "category": "Physical",
    "primary_type": "Normal",
    "pp": 40,
    "accuracy": 100,
    "base_power": 50,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_after_substitute_damage": ["run_event_on_move: AfterHit"],
        "on_after_hit": [
          "if $source.hp == 0:",
          ["return"],
          "remove_volatile: $source partiallytrapped",
          "remove_volatile: $source leechseed",
          "$side_conditions = [spikes, toxicspikes, stealthrock, stickyweb]",
          "foreach $condition in $side_conditions:",
          ["remove_side_condition: $source.side $condition"]
        ]
      }
    }
  },
  "sweetscent": {
    "name": "Sweet Scent",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 20,
    "accuracy": 100,
    "target": "AllAdjacentFoes",
    "flags": ["Mirror", "Protect", "Reflectable"],
    "hit_effect": {
      "boosts": {
        "eva": -2
      }
    }
  },
  "irontail": {
    "name": "Iron Tail",
    "category": "Physical",
    "primary_type": "Steel",
    "pp": 15,
    "accuracy": 75,
    "base_power": 100,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "30%",
        "target": {
          "boosts": {
            "def": -1
          }
        }
      }
    ]
  },
  "metalclaw": {
    "name": "Metal Claw",
    "category": "Physical",
    "primary_type": "Steel",
    "pp": 35,
    "accuracy": 95,
    "base_power": 50,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "10%",
        "target": {
          "boosts": {
            "atk": 1
          }
        }
      }
    ]
  },
  "vitalthrow": {
    "name": "Vital Throw",
    "category": "Physical",
    "primary_type": "Fighting",
    "pp": 10,
    "accuracy": "exempt",
    "base_power": 70,
    "priority": -1,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"]
  },
  "morningsun": {
    "name": "Morning Sun",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 5,
    "accuracy": "exempt",
    "target": "User",
    "flags": ["Heal", "Snatch"],
    "effect": {
      "callbacks": {
        "on_hit": [
          "$weather = $target.effective_weather",
          "if !$weather:",
          ["$factor = 1/2"],
          "else if $weather.is_sunny:",
          ["$factor = 2/3"],
          "else:",
          ["$factor = 1/4"],
          "if !func_call(heal: $target expr($target.max_hp * $factor)):",
          ["log_fail_heal"]
        ]
      }
    }
  },
  "synthesis": {
    "name": "Synthesis",
    "category": "Status",
    "primary_type": "Grass",
    "pp": 5,
    "accuracy": "exempt",
    "target": "User",
    "flags": ["Heal", "Snatch"],
    "effect": {
      "delegates": ["move:morningsun"]
    }
  },
  "moonlight": {
    "name": "Moonlight",
    "category": "Status",
    "primary_type": "Fairy",
    "pp": 5,
    "accuracy": "exempt",
    "target": "User",
    "flags": ["Heal", "Snatch"],
    "effect": {
      "delegates": ["move:morningsun"]
    }
  },
  "hiddenpower": {
    "name": "Hidden Power",
    "category": "Special",
    "primary_type": "Normal",
    "pp": 15,
    "accuracy": 100,
    "base_power": 60,
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_use_move": ["$move.type = $user.hidden_power_type"]
      }
    }
  },
  "crosschop": {
    "name": "Cross Chop",
    "category": "Physical",
    "primary_type": "Fighting",
    "pp": 5,
    "accuracy": 80,
    "base_power": 100,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "crit_ratio": 2
  },
  "twister": {
    "name": "Twister",
    "category": "Special",
    "primary_type": "Dragon",
    "pp": 20,
    "accuracy": 100,
    "base_power": 40,
    "target": "AllAdjacentFoes",
    "flags": ["Mirror", "Protect", "Wind"],
    "secondary_effects": [
      {
        "chance": "20%",
        "target": {
          "volatile_status": "flinch"
        }
      }
    ]
  },
  "raindance": {
    "name": "Rain Dance",
    "category": "Status",
    "primary_type": "Water",
    "pp": 5,
    "accuracy": "exempt",
    "target": "All",
    "flags": [],
    "hit_effect": {
      "weather": "rainweather"
    }
  },
  "sunnyday": {
    "name": "Sunny Day",
    "category": "Status",
    "primary_type": "Fire",
    "pp": 5,
    "accuracy": "exempt",
    "target": "All",
    "flags": [],
    "hit_effect": {
      "weather": "harshsunlight"
    }
  },
  "crunch": {
    "name": "Crunch",
    "category": "Physical",
    "primary_type": "Dark",
    "pp": 15,
    "accuracy": 100,
    "base_power": 80,
    "target": "Normal",
    "flags": ["Bite", "Contact", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "20%",
        "target": {
          "boosts": {
            "def": -1
          }
        }
      }
    ]
  },
  "mirrorcoat": {
    "name": "Mirror Coat",
    "category": "Special",
    "primary_type": "Psychic",
    "pp": 20,
    "accuracy": 100,
    "priority": -5,
    "target": "Scripted",
    "flags": ["FailMeFirst", "NoAssist", "NoMetronome", "Protect"],
    "effect": {
      "callbacks": {
        "on_before_turn": ["add_volatile: $mon $this.id"],
        "on_try_use_move": [
          "$effect_state = func_call(volatile_status_state: $user $this.id)",
          "if !$effect_state or !$effect_state.target_side or $effect_state.target_position.is_undefined:",
          ["return false"]
        ],
        "on_move_damage": [
          "$effect_state = func_call(volatile_status_state: $source $this.id)",
          "if !$effect_state:",
          ["return 0"],
          "return $effect_state.damage"
        ]
      }
    },
    "condition": {
      "duration": 1,
      "no_copy": true,
      "callbacks": {
        "on_start": ["$effect_state.damage = 0"],
        "on_redirect_target": [
          "if $move.id != counter:",
          ["return"],
          "if !$effect_state.target_side or $effect_state.target_position.is_undefined:",
          ["return"],
          "return func_call(mon_in_position: $effect_state.target_side $effect_state.target_position)"
        ],
        "on_damaging_hit": [
          "if !func_call(is_ally: $source $target) and $move.category == special:",
          [
            "$effect_state.target_side = $source.side",
            "$effect_state.target_position = $source.position",
            "$effect_state.damage = 2 * $damage"
          ]
        ]
      }
    }
  },
  "psychup": {
    "name": "Psych Up",
    "category": "Status",
    "primary_type": "Normal",
    "pp": 10,
    "accuracy": "exempt",
    "target": "Normal",
    "flags": ["BypassSubstitute"],
    "effect": {
      "callbacks": {
        "on_hit": [
          "$source.boosts = $target.boosts",
          "log_custom_effect: copyboosts no_effect with_target use_source with_source use_target_as_source",
          "$volatiles = [focusenergy]",
          "foreach $volatile in $volatiles:",
          [
            "if func_call(has_volatile: $target $volatile):",
            ["add_volatile: $source $volatile"],
            "else:",
            ["remove_volatile: $source $volatile"]
          ]
        ]
      }
    }
  },
  "extremespeed": {
    "name": "Extreme Speed",
    "category": "Physical",
    "primary_type": "Normal",
    "pp": 5,
    "accuracy": 100,
    "base_power": 80,
    "priority": 2,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"]
  },
  "ancientpower": {
    "name": "Ancient Power",
    "category": "Special",
    "primary_type": "Rock",
    "pp": 5,
    "accuracy": 100,
    "base_power": 60,
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "10%",
        "user": {
          "boosts": { "atk": 1, "def": 1, "spa": 1, "spd": 1, "spe": 1 }
        }
      }
    ]
  },
  "shadowball": {
    "name": "Shadow Ball",
    "category": "Special",
    "primary_type": "Ghost",
    "pp": 15,
    "accuracy": 100,
    "base_power": 80,
    "target": "Normal",
    "flags": ["Bullet", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "20%",
        "target": {
          "boosts": {
            "spd": -1
          }
        }
      }
    ]
  },
  "futuresight": {
    "name": "Future Sight",
    "category": "Special",
    "primary_type": "Psychic",
    "pp": 10,
    "accuracy": 100,
    "base_power": 120,
    "target": "Normal",
    "flags": ["Future"],
    "effect": {
      "callbacks": {
        "on_ignore_immunity": ["return true"],
        "on_try_move": [
          "if !func_call(add_slot_condition: $target.side $target.position futuremove use_target_as_source):",
          ["return false"],
          "do_not_animate_last_move",
          "return stop"
        ]
      },
      "local_data": {
        "moves": {
          "futuremove": {
            "name": "Future Sight",
            "category": "Special",
            "primary_type": "Psychic",
            "accuracy": 100,
            "base_power": 120,
            "target": "Scripted",
            "flags": ["Future"]
          }
        }
      }
    }
  },
  "rocksmash": {
    "name": "Rock Smash",
    "category": "Physical",
    "primary_type": "Fighting",
    "pp": 15,
    "accuracy": 100,
    "base_power": 40,
    "target": "Normal",
    "flags": ["Contact", "Mirror", "Protect"],
    "secondary_effects": [
      {
        "chance": "50%",
        "target": {
          "boosts": {
            "def": -1
          }
        }
      }
    ]
  },
  "whirlpool": {
    "name": "Whirlpool",
    "category": "Special",
    "primary_type": "Water",
    "pp": 15,
    "accuracy": 85,
    "base_power": 35,
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "hit_effect": {
      "volatile_status": "partiallytrapped"
    }
  },
  "beatup": {
    "name": "Beat Up",
    "category": "Physical",
    "primary_type": "Dark",
    "pp": 10,
    "accuracy": 100,
    "target": "Normal",
    "flags": ["Mirror", "Protect"],
    "effect": {
      "callbacks": {
        "on_use_move": [
          "$effect_state.mons = []",
          "foreach $mon in func_call(all_mons_in_party: $user.player):",
          [
            "if $mon == $user or (!$mon.exited and !$mon.status):",
            ["$effect_state.mons = func_call(append: $effect_state.mons $mon)"]
          ],
          "$move.multihit = $effect_state.mons.length"
        ],
        "on_move_base_power": [
          "$mon = func_call(index: $effect_state.mons expr($move.hit - 1))",
          "log_activate: str('hit:{}', $mon.name)",
          "return 5 + $mon.base_stats.atk / 10"
        ]
      }
    }
  }
}
