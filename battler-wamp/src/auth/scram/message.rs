use battler_wamp_values::WampDictionary;

use crate::auth::{
    channel_binding::ChannelBinding,
    key_derivation_function::KeyDerivationFunction,
    message::{
        ClientFinalMessage as GenericClientFinalMessage,
        ClientFirstMessage as GenericClientFirstMessage,
        ServerFinalMessage as GenericServerFinalMessage,
        ServerFirstMessage as GenericServerFirstMessage,
    },
};

/// The extra data for the client's first message of the WAMP-SCRAM authentication method.
#[derive(Debug, WampDictionary)]
pub struct ClientFirstMessageExtra {
    /// Base64-encoded sequence of random octets, generated by the client.
    pub nonce: String,
    /// Optional desired channel binding type.
    pub channel_binding: Option<ChannelBinding>,
}

/// The extra data for the server's first message of the WAMP-SCRAM authentication method.
#[derive(Debug, WampDictionary)]
pub struct ServerFirstMessageExtra {
    /// Server-generated nonce that is appended to the client-generated nonce.
    pub nonce: String,
    /// Base64-encoded salt for this user, to be passed to the key derivation function.
    pub salt: String,
    /// Key derivation function used to hash the password.
    ///
    /// The resulting value is stored with each user record in the authentication database.
    pub kdf: KeyDerivationFunction,
    /// Execution time cost factor to use for generating the salted password hash.
    ///
    /// Stored with each user record in the authentication database.
    pub iterations: u64,
    /// The memory cost factor to use for generating the salted password hash.
    ///
    /// Only used for the Argon2 key derivation function. Stored with each user record in the
    /// authentication database.
    pub memory: Option<u64>,
}

/// The extra data for the client's final message of the WAMP-SCRAM authentication method.
#[derive(Debug, WampDictionary)]
pub struct ClientFinalMessageExtra {
    /// Concatenated client-server nonce.
    pub nonce: String,
    /// The channel binding type that was sent in the original message.
    pub channel_binding: Option<ChannelBinding>,
    /// Base64-encoded channel binding data. Must be present iff `channel_binding` is present.
    ///
    /// The format of the binding data is dependent on the binding type.
    pub cbind_data: Option<String>,
}

/// The extra data for the server's final message of the WAMP-SCRAM authentication method.
#[derive(Debug, WampDictionary)]
pub struct ServerFinalMessageExtra {
    /// Base64-encoded server signature.
    pub verifier: String,
}

pub type ClientFirstMessage = GenericClientFirstMessage<ClientFirstMessageExtra>;
pub type ServerFirstMessage = GenericServerFirstMessage<ServerFirstMessageExtra>;
pub type ClientFinalMessage = GenericClientFinalMessage<ClientFinalMessageExtra>;
pub type ServerFinalMessage = GenericServerFinalMessage<ServerFinalMessageExtra>;
