use battler_wamp_values::{
    Integer,
    WampList,
};
use battler_wamprat_message::WampApplicationMessage;
use battler_wamprat_schema::WampSchema;
use battler_wamprat_uri::WampUriMatcher;

/// URI pattern for looking up a single battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}")]
pub struct BattlePattern(String);

/// Input for looking up a battle.
#[derive(WampApplicationMessage)]
pub struct BattleInput;

/// Arguments for an active battle.
#[derive(WampList)]
pub struct BattleOutputArgs {
    /// JSON-serialized [`battler_service::Battle`].
    pub battle_json: String,
}

/// An active battle.
#[derive(WampApplicationMessage)]
pub struct BattleOutput(#[arguments] BattleOutputArgs);

/// Arguments for creating a new battle.
#[derive(WampList)]
pub struct CreateInputArgs {
    /// JSON-serialized [`battler::CoreBattleOptions`].
    pub options_json: String,
    /// JSON-serialized [`battler::CoreBattleEngineOptions`].
    pub engine_options_json: String,
}

/// Input for creating a new battle.
#[derive(WampApplicationMessage)]
pub struct CreateInput(#[arguments] CreateInputArgs);

/// URI pattern for updating a player's team in a battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}.update_team")]
pub struct UpdateTeamPattern(String);

/// Arguments for updating a team.
#[derive(WampList)]
pub struct UpdateTeamInputArgs {
    /// Player ID.
    pub player: String,
    /// JSON-serialized [`battler::TeamData`].
    pub team_data_json: String,
}

/// Input for updating a team.
#[derive(WampApplicationMessage)]
pub struct UpdateTeamInput(#[arguments] UpdateTeamInputArgs);

/// Output of updating a team.
#[derive(WampApplicationMessage)]
pub struct UpdateTeamOutput;

/// URI pattern for validating a player in a battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}.validate_player")]
pub struct ValidatePlayerPattern(String);

/// Arguments for validating a player.
#[derive(WampList)]
pub struct ValidatePlayerInputArgs {
    /// Player ID.
    pub player: String,
}

/// Input for validating a player.
#[derive(WampApplicationMessage)]
pub struct ValidatePlayerInput(#[arguments] ValidatePlayerInputArgs);

/// Arguments for the output of validating a player in a battle.
#[derive(WampList)]
pub struct ValidatePlayerOutputArgs {
    /// Problems generated by validation.
    pub problems: Vec<String>,
}

/// Output of validating a player in a battle.
#[derive(WampApplicationMessage)]
pub struct ValidatePlayerOutput(#[arguments] ValidatePlayerOutputArgs);

/// URI pattern for starting a battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}.start")]
pub struct StartPattern(String);

/// Input for starting a battle.
#[derive(WampApplicationMessage)]
pub struct StartInput;

/// Output of starting a battle.
#[derive(WampApplicationMessage)]
pub struct StartOutput;

/// URI pattern for reading a player's data in a battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}.player_data")]
pub struct PlayerDataPattern(String);

/// Arguments for reading a player's data in a battle.
#[derive(WampList)]
pub struct PlayerDataInputArgs {
    /// Player ID.
    pub player: String,
}

/// Input for reading a player's data in a battle.
#[derive(WampApplicationMessage)]
pub struct PlayerDataInput(#[arguments] PlayerDataInputArgs);

/// Arguments for the player's data in a battle.
#[derive(WampList)]
pub struct PlayerDataOutputArgs {
    /// JSON-serialized [`battler::PlayerData`].
    pub player_data_json: String,
}

/// A player's data in a battle.
#[derive(WampApplicationMessage)]
pub struct PlayerDataOutput(#[arguments] PlayerDataOutputArgs);

/// URI pattern for reading a player's current request in a battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}.request")]
pub struct RequestPattern(String);

/// Arguments for reading a player's current request in a battle.
#[derive(WampList)]
pub struct RequestInputArgs {
    /// Player ID.
    pub player: String,
}

/// Input for reading a player's current request in a battle.
#[derive(WampApplicationMessage)]
pub struct RequestInput(#[arguments] RequestInputArgs);

/// Arguments for a player's current request in a battle.
#[derive(WampList)]
pub struct RequestOutputArgs {
    /// JSON-serialized [`battler::Request`].
    pub request_json: Option<String>,
}

/// A player's current request in a battle.
#[derive(WampApplicationMessage)]
pub struct RequestOutput(#[arguments] RequestOutputArgs);

/// URI pattern for a player making a choice in a battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}.make_choice")]
pub struct MakeChoicePattern(String);

/// Arguments for a player making a choice in a battle.
#[derive(WampList)]
pub struct MakeChoiceInputArgs {
    /// Player ID.
    pub player: String,
    /// Choice.
    pub choice: String,
}

/// Input for a player making a choice in a battle.
#[derive(WampApplicationMessage)]
pub struct MakeChoiceInput(#[arguments] MakeChoiceInputArgs);

/// Output of a player making a choice in a battle.
#[derive(WampApplicationMessage)]
pub struct MakeChoiceOutput;

/// URI pattern for deleting a battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}.delete")]
pub struct DeletePattern(String);

/// Input for deleting a battle.
#[derive(WampApplicationMessage)]
pub struct DeleteInput;

/// Output of deleting a battle.
#[derive(WampApplicationMessage)]
pub struct DeleteOutput;

/// URI pattern for reading the full log of a battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}.full_log")]
pub struct FullLogPattern(String);

/// Arguments for reading the full log of a battle.
#[derive(WampList)]
pub struct FullLogInputArgs {
    /// Side of the battle.
    ///
    /// If `None`, the public log is used.
    pub side: Option<u64>,
}

/// Input for reading the full log of a battle.
#[derive(WampApplicationMessage)]
pub struct FullLogInput(#[arguments] FullLogInputArgs);

/// Arguments for the full log of a battle.
#[derive(WampList)]
pub struct FullLogOutputArgs {
    pub log: Vec<String>,
}

/// The full log of a battle.
#[derive(WampApplicationMessage)]
pub struct FullLogOutput(#[arguments] FullLogOutputArgs);

/// URI pattern for reading the public log of a battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}.log.public")]
pub struct PublicLogPattern(String);

/// A log entry.
#[derive(WampList)]
pub struct LogEntry {
    /// Index of the entry.
    pub index: Integer,
    /// Content of the entry.
    pub content: String,
}

/// An event for a new log entry.
#[derive(WampApplicationMessage)]
pub struct LogEvent(#[arguments] LogEntry);

/// URI pattern for reading the private log for a specific side of a battle.
#[derive(WampUriMatcher)]
#[uri("com.battler.battler_service.{0}.log.side.{1}")]
pub struct SideLogPattern(String, usize);

#[derive(WampSchema)]
#[realm("com.battler")]
pub enum BattlerService {
    /// Looks up an active battle.
    #[rpc(pattern = BattlePattern, input = BattleInput, output = BattleOutput)]
    Battle,
    /// Creates a new battle.
    #[rpc(uri = "com.battler.battler_service.create", input = CreateInput, output = BattleOutput)]
    Create,
    /// Updates a player's team in a battle.
    #[rpc(pattern = UpdateTeamPattern, input = UpdateTeamInput, output = UpdateTeamOutput)]
    UpdateTeam,
    /// Validates a player in a battle.
    #[rpc(pattern = ValidatePlayerPattern, input = ValidatePlayerInput, output = ValidatePlayerOutput)]
    ValidatePlayer,
    /// Starts a battle.
    #[rpc(pattern = StartPattern, input = StartInput, output = StartOutput)]
    Start,
    /// Reads a player's data in a battle.
    #[rpc(pattern = PlayerDataPattern, input = PlayerDataInput, output = PlayerDataOutput)]
    PlayerData,
    /// Reads a player's current request in a battle.
    #[rpc(pattern = RequestPattern, input = RequestInput, output = RequestOutput)]
    Request,
    /// Makes a choice for a player in a battle.
    #[rpc(pattern = MakeChoicePattern, input = MakeChoiceInput, output = MakeChoiceOutput)]
    MakeChoice,
    /// Deletes a battle.
    #[rpc(pattern = DeletePattern, input = DeleteInput, output = DeleteOutput)]
    Delete,
    /// Reads the full log of a battle.
    #[rpc(pattern = FullLogPattern, input = FullLogInput, output = FullLogOutput)]
    FullLog,
    /// Events for new entries to the public log of a battle.
    #[pubsub(pattern = PublicLogPattern, event = LogEvent)]
    PublicLog,
    /// Events for new entries to the private log for a specific side of a battle.
    #[pubsub(pattern = SideLogPattern, event = LogEvent)]
    SideLog,
}
