{
  "switchin": {
    "name": "Switch In",
    "condition_type": "Built-in"
  },
  "drain": {
    "name": "Drain",
    "condition_type": "Built-in"
  },
  "recoil": {
    "name": "Recoil",
    "condition_type": "Built-in"
  },
  "strugglerecoil": {
    "name": "Struggle Recoil",
    "condition_type": "Built-in"
  },
  "normaltype": {
    "name": "Normal",
    "condition_type": "Type"
  },
  "firetype": {
    "name": "Fire",
    "condition_type": "Type",
    "condition": {
      "callbacks": {
        "on_immunity": ["if $effect.id == brn:", ["return false"]]
      }
    }
  },
  "watertype": {
    "name": "Water",
    "condition_type": "Type"
  },
  "electrictype": {
    "name": "Electric",
    "condition_type": "Type",
    "condition": {
      "callbacks": {
        "on_immunity": ["if $effect.id == par:", ["return false"]]
      }
    }
  },
  "grasstype": {
    "name": "Grass",
    "condition_type": "Type",
    "condition": {
      "callbacks": {
        "on_immunity": [
          "if $effect.is_move and func_call(move_has_flag: $effect powder):",
          ["return false"]
        ]
      }
    }
  },
  "icetype": {
    "name": "Ice",
    "condition_type": "Type",
    "condition": {
      "callbacks": {
        "on_immunity": ["if [frz, hail] has $effect.id:", ["return false"]]
      }
    }
  },
  "fightingtype": {
    "name": "Fighting",
    "condition_type": "Type"
  },
  "poisontype": {
    "name": "Poison",
    "condition_type": "Type",
    "condition": {
      "callbacks": {
        "on_immunity": ["if [psn, tox] has $effect.id:", ["return false"]]
      }
    }
  },
  "groundtype": {
    "name": "Ground",
    "condition_type": "Type",
    "condition": {
      "callbacks": {
        "on_immunity": ["if $effect.id == sandstorm:", ["return false"]]
      }
    }
  },
  "flyingtype": {
    "name": "Flying",
    "condition_type": "Type"
  },
  "psychictype": {
    "name": "Psychic",
    "condition_type": "Type"
  },
  "bugtype": {
    "name": "Bug",
    "condition_type": "Type"
  },
  "rocktype": {
    "name": "Rock",
    "condition_type": "Type",
    "condition": {
      "callbacks": {
        "on_immunity": ["if $effect.id == sandstorm:", ["return false"]]
      }
    }
  },
  "ghosttype": {
    "name": "Ghost",
    "condition_type": "Type",
    "condition": {
      "callbacks": {
        "on_immunity": ["if $effect.id == trapped:", ["return false"]]
      }
    }
  },
  "dragontype": {
    "name": "Dragon",
    "condition_type": "Type"
  },
  "darktype": {
    "name": "Dark",
    "condition_type": "Type",
    "condition": {
      "callbacks": {
        "on_immunity": ["# TODO: Prankster immunity"]
      }
    }
  },
  "steeltype": {
    "name": "Steel",
    "condition_type": "Type",
    "condition": {
      "callbacks": {
        "on_immunity": ["if [psn, tox] has $effect.id:", ["return false"]]
      }
    }
  },
  "fairytype": {
    "name": "Fairy",
    "condition_type": "Type"
  },
  "brn": {
    "name": "Burn",
    "condition_type": "Status",
    "condition": {
      "callbacks": {
        "on_start": [
          "if $source_effect.is_ability:",
          ["log_status: $this.name with_source_effect"],
          "else:",
          ["log_status: $this.name"]
        ],
        "on_residual": {
          "order": 10,
          "program": ["damage: expr($target.base_max_hp / 16)"]
        },
        "on_modify_damage": {
          "order": 1,
          "program": [
            "if $move.category == physical and !func_call(has_ability: $user guts) and $move.id != facade:",
            ["return expr($damage / 2)"]
          ]
        }
      }
    }
  },
  "par": {
    "name": "Paralysis",
    "condition_type": "Status",
    "condition": {
      "callbacks": {
        "on_start": [
          "if $source_effect.is_ability:",
          ["log_status: $this.name with_source_effect"],
          "else:",
          ["log_status: $this.name"]
        ],
        "on_before_move": {
          "priority": 1,
          "program": [
            "if func_call(chance: 1 4):",
            ["log_cant: $this.name", "return false"]
          ]
        },
        "on_modify_spe": [
          "if !func_call(has_ability: $mon quickfeet):",
          ["return expr($spe / 2)"]
        ]
      }
    }
  },
  "slp": {
    "name": "Sleep",
    "condition_type": "Status",
    "condition": {
      "callbacks": {
        "is_asleep": ["return true"],
        "on_start": [
          "if $source_effect.is_ability or $source_effect.is_move:",
          ["log_status: $this.name with_source_effect"],
          "else:",
          ["log_status: $this.name"],
          "# 1-3 turns.",
          "$effect_state.total_time = func_call(random: 2 5)",
          "$effect_state.time = $effect_state.total_time"
        ],
        "on_before_move": {
          "priority": 10,
          "program": [
            "if func_call(has_ability: $user earlybird):",
            ["$effect_state.time = $effect_state.time - 1"],
            "$effect_state.time = $effect_state.time - 1",
            "if $effect_state.time <= 0:",
            ["cure_status: $user", "return"],
            "log_cant: $this.name",
            "if func_call(move_has_flag: $move sleepusable):",
            ["return"],
            "return false"
          ]
        }
      }
    }
  },
  "frz": {
    "name": "Freeze",
    "condition_type": "Status",
    "condition": {
      "callbacks": {
        "on_start": [
          "if $source_effect.is_ability:",
          ["log_status: $this.name with_source_effect"],
          "else:",
          ["log_status: $this.name"]
        ],
        "on_before_move": {
          "priority": 10,
          "program": [
            "if func_call(move_has_flag: $move thawing):",
            ["return"],
            "if func_call(chance: 1 5):",
            ["cure_status: $user", "return"],
            "log_cant: $this.name",
            ["return false"]
          ]
        },
        "on_use_move": [
          "if func_call(move_has_flag: $move thawing):",
          ["cure_status: $user use_source log_effect"]
        ],
        "on_after_move_secondary_effects": [
          "if $move.thaws_target:",
          ["cure_status: $target use_source"]
        ],
        "on_damaging_hit": [
          "if $move.type == fire and $move.category != status:",
          ["cure_status: $target use_source"]
        ]
      }
    }
  },
  "psn": {
    "name": "Poison",
    "condition_type": "Status",
    "condition": {
      "callbacks": {
        "on_start": [
          "if $source_effect.is_ability:",
          ["log_status: $this.name with_source_effect"],
          "else:",
          ["log_status: $this.name"]
        ],
        "on_residual": {
          "order": 9,
          "program": ["damage: expr($target.base_max_hp / 8)"]
        }
      }
    }
  },
  "tox": {
    "name": "Bad Poison",
    "condition_type": "Status",
    "condition": {
      "callbacks": {
        "on_start": [
          "$effect_state.stage = 0",
          "if $source_effect.is_ability:",
          ["log_status: $this.name with_source_effect"],
          "else:",
          ["log_status: $this.name"]
        ],
        "on_switch_in": ["$effect_state.stage = 0"],
        "on_residual": {
          "order": 9,
          "program": [
            "if $effect_state.stage < 15:",
            ["$effect_state.stage = $effect_state.stage + 1"],
            "damage: expr($target.base_max_hp / 16 * $effect_state.stage)"
          ]
        }
      }
    }
  },
  "confusion": {
    "name": "Confusion",
    "condition_type": "Volatile",
    "condition": {
      "callbacks": {
        "on_start": [
          "if $source_effect.id == lockedmove:",
          ["log_start: fatigue"],
          "else:",
          ["log_start"],
          "$effect_state.time = func_call(random: 2 6)"
        ],
        "on_end": ["log_end"],
        "on_before_move": {
          "priority": 3,
          "program": [
            "$effect_state.time = $effect_state.time - 1",
            "if $effect_state.time == 0:",
            ["remove_volatile: $user $this.id", "return"],
            "log_activate: with_target",
            "if !func_call(chance: 33 100):",
            ["return"],
            "$damage = func_call(calculate_confusion_damage: $user 40)",
            "damage: no_source $user $damage $this",
            "return false"
          ]
        }
      }
    }
  },
  "twoturnmove": {
    "name": "Two Turn Move",
    "condition_type": "Built-in",
    "condition": {
      "duration": 2,
      "callbacks": {
        "on_start": [
          "# Note that the $target here is the user of the move (target of this condition).",
          "$effect_state.move = $source_effect.id",
          "add_volatile: $target $source_effect.id",
          "# If this move is called by another move, we may need to modify the targer that the user will be locked into.",
          "# For example, Metronome targets the user, but Razor Wind targets adjacent foes.",
          "if $source_effect.has_source_effect and $source_effect.move_target != user:",
          [
            "$need_new_target = false",
            "if !$target.last_target_location:",
            [
              "# No target selected for the last move.",
              "$need_new_target = true"
            ],
            "else:",
            [
              "# The last target selected no longer exists or fainted.",
              "$last_target = func_call(mon_at_target_location: $target $target.last_target_location)",
              "$need_new_target = expr(!$last_target or $last_target.fainted)"
            ],
            "if $need_new_target:",
            [
              "# Choose a random target for the move being used.",
              "$move_data = func_call(get_move: $effect_state.move)",
              "$target.last_target_location = func_call(target_location_of_mon: $target func_call(random_target: $target $move_data.move_target))"
            ]
          ],
          "do_not_animate_last_move",
          "# Still run events associated with the user preparing to hit the target, since they are locked into this move.",
          "run_event: PrepareHit"
        ],
        "on_set_last_move": [
          "if $effect_state.duration > 1:",
          ["return false"]
        ],
        "on_deduct_pp": {
          "order": 999,
          "program": [
            "# Run last, to ensure no PP is deducted while charging.",
            "if $effect_state.duration > 1:",
            ["return 0"]
          ]
        },
        "on_lock_move": ["return $effect_state.move"],
        "on_move_aborted": ["remove_volatile: $user $effect_state.move"],
        "on_end": ["remove_volatile: $target $effect_state.move"]
      }
    }
  },
  "partiallytrapped": {
    "name": "Partially Trapped",
    "condition_type": "Volatile",
    "condition": {
      "callbacks": {
        "on_duration": ["return func_call(random: 5 7)"],
        "on_start": [
          "log_activate: with_target with_source no_effect str('move:{}', $effect_state.source_effect.name)",
          "$effect_state.divisor = 8"
        ],
        "on_residual": {
          "order": 13,
          "program": [
            "$source = $effect_state.source",
            "if !$source.active or $source.hp == 0:",
            [
              "remove_volatile: $target $this.id no_events",
              "log_end: no_effect str('move:{}', $effect_state.source_effect.name) silent",
              "return"
            ],
            "damage: expr($target.base_max_hp / $effect_state.divisor) $effect_state.source_effect"
          ]
        },
        "on_end": [
          "log_end: no_effect str('move:{}', $effect_state.source_effect.name)"
        ],
        "on_trap_mon": ["trap: $mon"]
      }
    }
  },
  "lockedmove": {
    "name": "Locked Move",
    "condition_type": "Volatile",
    "condition": {
      "callbacks": {
        "on_duration": ["return func_call(random: 2 4)"],
        "on_start": ["$effect_state.move = $source_effect.id"],
        "on_after_move": [
          "if $user.move_this_turn_failed:",
          ["remove_volatile: $user $this.id no_events"],
          "else if $effect_state.duration == 1:",
          ["remove_volatile: $user $this.id"]
        ],
        "on_move_aborted": ["remove_volatile: $user $this.id no_events"],
        "on_end": ["add_volatile: $target confusion"],
        "on_lock_move": ["return $effect_state.move"]
      }
    }
  },
  "flinch": {
    "name": "Flinch",
    "condition_type": "Volatile",
    "condition": {
      "duration": 1,
      "callbacks": {
        "on_before_move": {
          "priority": 8,
          "program": [
            "log_cant: $this.name",
            "run_event: Flinch",
            "return false"
          ]
        }
      }
    }
  },
  "mustrecharge": {
    "name": "Must Recharge",
    "condition_type": "Volatile",
    "condition": {
      "duration": 2,
      "callbacks": {
        "on_start": [
          "log: mustrecharge str('mon:{}', $target.position_details)"
        ],
        "on_before_move": {
          "priority": 11,
          "program": [
            "log_cant: $this.name",
            "remove_volatile: $user $this.id",
            "return false"
          ]
        },
        "on_lock_move": ["return recharge"]
      }
    }
  },
  "rainweather": {
    "name": "Rain",
    "condition_type": "Weather",
    "condition": {
      "duration": 5,
      "callbacks": {
        "is_raining": ["return true"],
        "on_duration": ["if $source.effective_item == damprock:", ["return 8"]],
        "on_source_weather_modify_damage": [
          "# Run against the target of the damage calculation, since weather can be suppressed for the target.",
          "if $move.type == water:",
          ["return expr($damage * 3/2)"],
          "if $move.type == fire:",
          ["return expr($damage * 1/2)"]
        ],
        "on_field_start": [
          "if $source_effect.is_ability:",
          ["log_weather: $this.name with_source_effect"],
          "else:",
          ["log_weather: $this.name"]
        ],
        "on_field_residual": {
          "order": 1,
          "program": ["log_weather: $this.name residual", "run_event: Weather"]
        },
        "on_field_end": ["log_weather"]
      }
    }
  }
}
